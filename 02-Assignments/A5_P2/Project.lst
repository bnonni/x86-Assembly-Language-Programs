Microsoft (R) Macro Assembler Version 14.16.27027.1	    04/05/19 19:14:43
Nonni2.asm						     Page 1 - 1


				; Student: Bryan Nonni
				; Class: CSC3210
				; Assignment#: 5-2
				; Description: Implement the following expression in assembly language:
				; for (i = 5; i > 0; i--)
				; {
				; for(j = 3; j > 0; j--)
				; {
				; y = i + j ;
				; }
				; }
				; Assume i and j are 32-bit registers and y is a list
				  
				.386
				.model flat,stdcall
				.stack 4096
				ExitProcess proto,dwExitCode:dword

 00000000			.data 
 00000000 00000000			y DWORD ?
 00000000			.code
 00000000			main proc

 00000000  B9 00000000		mov ecx, 0 ; clear eax register
 00000005  B8 00000000		mov eax, 0 ; clear eax register
 0000000A  B9 00000005		mov ecx, 5 ; move outer loop counter (i) to ecx
 0000000F  8B D1		mov edx, ecx ; move i to edx for storage
 00000011  BE 00000000 R	mov esi, OFFSET y ; move address of y to esi
 00000016  B9 00000003		mov ecx, 3 ; move inner loop counter to ecx

 0000001B			L1:					; L1 label - outer loop
 0000001B  83 FA 00			cmp edx, 0		; compare edx counter (i) to 0
 0000001E  74 14			je L4			; jump to L4 (end) if edx (i) = 0
 00000020			L2:					; L2 label - inner loop
 00000020  03 C2			add eax, edx	; add edx (i - outer loop counter) to eax
 00000022  03 C1			add eax, ecx	; add ecx (j - inner loop counter) to eax, line 35 & 36 => y=i+j
 00000024  89 06			mov [esi], eax	; place the value into the y list
 00000026  46				inc esi			; move esi down the list 1 place
 00000027  B8 00000000			mov eax, 0		; move 0 to eax to clear register
 0000002C			L3:
 0000002C  B9 00000003			mov ecx, 3
 00000031  4A				dec edx
 00000032  EB E7			jmp L1
 00000034			L4:
					invoke ExitProcess,0
 00000034  6A 00	   *	    push   +000000000h
 00000036  E8 00000000 E   *	    call   ExitProcess

 0000003B			main endp
				end main
Microsoft (R) Macro Assembler Version 14.16.27027.1	    04/05/19 19:14:43
Nonni2.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000004 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000003B DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000003B Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000001B _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000020 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 0000002C _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 00000034 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
y  . . . . . . . . . . . . . . .	DWord	 00000000 _DATA	

	   0 Warnings
	   0 Errors
