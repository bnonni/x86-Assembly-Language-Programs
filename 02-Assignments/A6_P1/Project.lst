Microsoft (R) Macro Assembler Version 14.16.27027.1	    04/19/19 13:48:36
Nonni1.asm						     Page 1 - 1


				; Student: Bryan Nonni
				; Class: CSC3210
				; Assignment#: 6-1
				; Description: Write an assembly program to find the smallest element by searching an array
				; int array[] = {23, 12, 3, -4, -10, 35, 11, 8, 18}
				; int index = 0 ;
				; int min = ary[0];
				; int arraySize = sizeof array / sizeof min
				; while (index < arraySize){
				; if (ary[index] < min)
				; min = ary[index]; 
				; }
				; Use cmp instruction and the appropriate jump instruction (signed or unsigned) to translate the if and while statements
				; Use $ operator (see chapter 3) to calculate the size of the array, and inc instruction to increment the index of the array
				; Run your program using the debugger to verify your answers (do this too for questions 2 and 3)
				  
				.386
				.model flat,stdcall
				.stack 4096
				ExitProcess proto,dwExitCode:dword

 00000000			.data 
 00000000 00000017			array SDWORD 23, 12, 3, -4, -10, 35, 11, 8, 18
	   0000000C
	   00000003
	   FFFFFFFC
	   FFFFFFF6
	   00000023
	   0000000B
	   00000008
	   00000012
 00000024 = 00000024			arraySize = ($ - array)
 00000024 00000000			index DWORD 0
 00000028 00000000			min DWORD ?
 00000000			.code
 00000000			main proc
 00000000  8B 35 00000024 R		mov esi, index
 00000006  B9 00000024			mov ecx, arraySize
 0000000B  8B 86 00000000 R		mov eax, array[esi] 
 00000011  8B 9E 00000004 R		mov ebx, array[esi+4] 
 00000017  3B D8			cmp ebx, eax
 00000019  7F 30			jg move
 0000001B  83 05 00000024 R		add index, 8
	   08
 00000022  8B 35 00000024 R		mov esi, index
 00000028  8B 86 00000000 R		mov eax, array[esi]
 0000002E			check:
 0000002E  3B CE			cmp ecx, esi
 00000030  74 30			je store
 00000032  3B D8			cmp ebx, eax 
 00000034  7F 15			jg move
 00000036  83 05 00000024 R		add index, 4
	   04
 0000003D  8B 35 00000024 R		mov esi, index
 00000043  8B 86 00000000 R		mov eax, array[esi]
 00000049  EB E3			jmp check
 0000004B			move:
 0000004B  8B D8			mov ebx, eax
 0000004D  83 05 00000024 R		add index, 4
	   04
 00000054  8B 35 00000024 R		mov esi, index
 0000005A  8B 86 00000000 R		mov eax, array[esi]
 00000060  EB CC			jmp check
 00000062			store:
 00000062  89 1D 00000028 R		mov min, ebx
					invoke ExitProcess,0
 00000068  6A 00	   *	    push   +000000000h
 0000006A  E8 00000000 E   *	    call   ExitProcess
 0000006F			main endp
				end main
Microsoft (R) Macro Assembler Version 14.16.27027.1	    04/19/19 13:48:36
Nonni1.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000002C DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000006F DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000006F Public STDCALL
  check  . . . . . . . . . . . .	L Near	 0000002E _TEXT	
  move . . . . . . . . . . . . .	L Near	 0000004B _TEXT	
  store  . . . . . . . . . . . .	L Near	 00000062 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
arraySize  . . . . . . . . . . .	Number	 00000024h   
array  . . . . . . . . . . . . .	DWord	 00000000 _DATA	
index  . . . . . . . . . . . . .	DWord	 00000024 _DATA	
min  . . . . . . . . . . . . . .	DWord	 00000028 _DATA	

	   0 Warnings
	   0 Errors
